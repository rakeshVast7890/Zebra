from PIL import Image, ImageOps
import os

# Parameters for Zebra (assume 203 dpi)
dpi = 203  # typical Zebra resolution
label_w_in, label_h_in = 3, 2
label_w = int(label_w_in * dpi)   # pixels
label_h = int(label_h_in * dpi)

# Paths
input_path = "/mnt/data/IMG_20251002_054630.png"
output_path = "/mnt/data/rakesh_dragon_3x2_zpl.txt"

# Load and prepare image
img = Image.open(input_path).convert("RGBA")

# Remove alpha by compositing onto white
if img.mode == "RGBA":
    background = Image.new("RGBA", img.size, (255,255,255,255))
    img = Image.alpha_composite(background, img).convert("RGB")

# Resize preserving aspect ratio to fit within label
img.thumbnail((label_w, label_h), Image.LANCZOS)

# Create white canvas and paste centered
canvas = Image.new("RGB", (label_w, label_h), (255,255,255))
x = (label_w - img.width) // 2
y = (label_h - img.height) // 2
canvas.paste(img, (x, y))

# Convert to monochrome (1-bit). Use a threshold to keep details.
bw = canvas.convert("L").point(lambda p: 0 if p < 160 else 255, '1')

# Build bitmap bytes per ZPL expectation (MSB = leftmost pixel)
width = bw.width
height = bw.height
bytes_per_row = (width + 7) // 8
bitmap = bytearray()

for y in range(height):
    for byte_idx in range(bytes_per_row):
        byte = 0
        for bit in range(8):
            x = byte_idx * 8 + bit
            if x < width:
                pixel = bw.getpixel((x, y))  # 0 = black, 255 = white
                if pixel == 0:
                    byte |= (1 << (7 - bit))
        bitmap.append(byte)

total_bytes = len(bitmap)
hex_data = bitmap.hex().upper()

# Prepare ZPL
zpl = f"^XA\n^FO0,0\n^GFA,{total_bytes},{total_bytes},{bytes_per_row},{hex_data}\n^XZ\n"

# Save to file
with open(output_path, "w") as f:
    f.write(zpl)

# Output path for user
output_path

